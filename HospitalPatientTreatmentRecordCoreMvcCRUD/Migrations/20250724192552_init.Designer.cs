// <auto-generated />
using System;
using HospitalPatientTreatmentRecordCoreMvcCRUD.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalPatientTreatmentRecordCoreMvcCRUD.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250724192552_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HospitalPatientTreatmentRecordCoreMvcCRUD.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AdmitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmitted")
                        .HasColumnType("bit");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreatmentTypeId")
                        .HasColumnType("int");

                    b.HasKey("PatientId");

                    b.HasIndex("TreatmentTypeId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HospitalPatientTreatmentRecordCoreMvcCRUD.Models.TreatmentDetail", b =>
                {
                    b.Property<int>("TreatmentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentDetailId"));

                    b.Property<decimal>("Cost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("TreatmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TreatmentDetailId");

                    b.HasIndex("PatientId");

                    b.ToTable("TreatmentDetails");
                });

            modelBuilder.Entity("HospitalPatientTreatmentRecordCoreMvcCRUD.Models.TreatmentType", b =>
                {
                    b.Property<int>("TreatmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentTypeId"));

                    b.Property<string>("TreatmentTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TreatmentTypeId");

                    b.ToTable("TreatmentTypes");

                    b.HasData(
                        new
                        {
                            TreatmentTypeId = 1,
                            TreatmentTypeName = "Surgery"
                        },
                        new
                        {
                            TreatmentTypeId = 2,
                            TreatmentTypeName = "X-Ray"
                        },
                        new
                        {
                            TreatmentTypeId = 3,
                            TreatmentTypeName = "Vaccination"
                        },
                        new
                        {
                            TreatmentTypeId = 4,
                            TreatmentTypeName = "Physiotherapy"
                        });
                });

            modelBuilder.Entity("HospitalPatientTreatmentRecordCoreMvcCRUD.Models.Patient", b =>
                {
                    b.HasOne("HospitalPatientTreatmentRecordCoreMvcCRUD.Models.TreatmentType", "TreatmentType")
                        .WithMany("Patients")
                        .HasForeignKey("TreatmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreatmentType");
                });

            modelBuilder.Entity("HospitalPatientTreatmentRecordCoreMvcCRUD.Models.TreatmentDetail", b =>
                {
                    b.HasOne("HospitalPatientTreatmentRecordCoreMvcCRUD.Models.Patient", "Patient")
                        .WithMany("TreatmentDetails")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalPatientTreatmentRecordCoreMvcCRUD.Models.Patient", b =>
                {
                    b.Navigation("TreatmentDetails");
                });

            modelBuilder.Entity("HospitalPatientTreatmentRecordCoreMvcCRUD.Models.TreatmentType", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
